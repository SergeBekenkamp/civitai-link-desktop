name: Build/release Electron app

on:
  push:
    tags:
      - v*.*.*

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: build-linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:linux

      - name: build-mac
        if: matrix.os == 'macos-latest'
        run: npm run build:mac

      - name: build-win
        if: matrix.os == 'windows-latest'
        run: npm run build:win

      - name: Create Input file for test signing
        shell: bash
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/example
          echo 'Write-Output -InputObject "Happy Signing From ESigner.com!"' > ${GITHUB_WORKSPACE}/example/codesign1.ps1

      - uses: Test Signing
        if: matrix.os == 'windows-latest'
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.ES_USERNAME }}
          password: ${{ secrets.ES_PASSWORD }}
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          totp_secret: ${{ secrets.ES_TOTP_SECRET }}
          file_path: ${GITHUB_WORKSPACE}/example/codesign1.ps1
          malware_block: false
          override: true
          environment_name: TEST
          clean_logs: true

      # - name: Sign Artifact with CodeSignTool
      #   if: matrix.os == 'windows-latest'
      #   uses: sslcom/esigner-codesign@develop
      #   with:
      #     # Sign and timestamp code object.
      #     command: sign
      #     # SSL.com account username
      #     username: ${{ secrets.ES_USERNAME }}
      #     # SSL.com account password.
      #     password: ${{ secrets.ES_PASSWORD }}
      #     # Credential ID for signing certificate.
      #     credential_id: ${{ secrets.CREDENTIAL_ID }}
      #     # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)
      #     totp_secret: ${{ secrets.ES_TOTP_SECRET }}
      #     # Path of code object to be signed. (DLL, JAR, EXE, MSI files vb... )
      #     # ${name}-${version}-setup.${ext}
      #     file_path: ${{ github.workspace }}/dist/civitai-link-1.10.34-setup.exe
      #     # Directory where signed code object(s) will be written.
      #     # output_path: ${{ github.workspace }}/artifacts
      #     # Scan code before sign
      #     malware_block: false
      #     override: true
      #     # Environment Name, For Production 'PROD' or For Staging 'TEST'
      #     environment_name: PROD
      #     jvm_max_memory: 2048M

      - name: release
        uses: softprops/action-gh-release@v1
        if: always()
        with:
          draft: true
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
